<?php

use Drupal\Core\Config\FileStorage;
use Drupal\field\Entity\FieldStorageConfig;
use Drupal\field\Entity\FieldConfig;
use Psr\Log\LoggerInterface;
use Drupal\taxonomy\Entity\Vocabulary;


/**
 * Implements hook_install().
 */
function cds_artifact_type_install() {
  cds_artifact_type_update_8001();
  cds_artifact_type_update_8002();
  cds_artifact_type_update_8003();
}

/**
 * Update hook for adding DME eRx CRD fields to artifact content type.
 */
function cds_artifact_type_update_8001() {

  // Add the code system field
  $fieldName = 'field_code_system';
  $config = [
    'storage' => [
      'type' => 'string',
      'cardinality' => 1,
      'dependencies' => [
        'module' => [
          'node'
        ]
      ],
      'settings' => [
        'max_length'  => 255,
        'is_ascii'    => FALSE,
        'case_sensitive'  => FALSE
      ],
    ],
    'field' => [
      'label' => 'Code System',
      'description' => 'The name of the code system used to reference medication or durable medical equipment (DME). Only applicable for coverage requirement discovery (CRD) rules.',
      'settings' => [],
      'field_type' => 'string',
      'form' => [
        'weight' => 123,
        'region' => 'content',
        'type' => 'string_textfield',
        'settings' => [
          'size' => 60,
          'placeholder' => ''
        ],
      ],
      'view' => [
        'weight' => 19,
        'region' => 'content',
        'type' => 'string',
        'settings' => [
          'link_to_entity' => FALSE
        ],
      ]
    ],
    'group' => [
      'group_form_weight' => 20,
      'group_view_weight' => 20,
      'group_description' => 'Fields pertaining to coverage requirements discovery (CRD) for electronic prescribing (eRx) of medication or durable medical equipment (DME).',
      'group_form_label' => 'CRD',
      'group_view_label' => 'Coverage Requirements Discovery (CRD) for Electronic Prescribing (eRx)',
      'group_view_class' => 'artifact-crd-fields'
    ]
  ];
  add_artifact_field($fieldName, 'group_erx_crd', 'group_erx_crd', 'artifact', $config);

  // Add the equipment code field
  $fieldName = 'field_erx_code';
  $config['field']['label'] = 'Electronic Prescribing Code';
  $config['field']['description'] = 'The electronic prescribing (eRx) code representing a specific piece of medication or durable medical equipment (DME). Only applicable for coverage requirement discovery (CRD) rules.';
  $config['field']['form']['weight'] = 124;
  $config['field']['view']['weight'] = 20;
  add_artifact_field($fieldName, 'group_erx_crd', 'group_erx_crd', 'artifact', $config);

  // Add the payer field
  $fieldName = 'field_payer';
  $config['field']['label'] = 'Payer';
  $config['field']['description'] = 'The name of the payer for the medication or durable medical equipment (DME). Only applicable for coverage requirement discovery (CRD) rules.';
  $config['field']['form']['weight'] = 122;
  $config['field']['view']['weight'] = 18;
  add_artifact_field($fieldName, 'group_erx_crd', 'group_erx_crd', 'artifact', $config);

  // Create new views
  $config_path = join(DIRECTORY_SEPARATOR, 
    array(__DIR__, 'config', 'update_8001')
  );
  $source = new FileStorage($config_path);
  $active_storage = \Drupal::service('config.storage');
  $view_name = 'views.view.erx_rules';
  $active_storage->write($view_name, $source->read($view_name));

}

/**
 * Add a field to a node bundle.
 */
function add_artifact_field($fieldName, $formGroupName, $viewGroupName, $bundleName, $config) {

  // Check to make sure $fieldName does not already have field storage set up.
  if (empty($existingFieldStorage = FieldStorageConfig::loadByName('node', $fieldName))) {
    $fieldStorage = FieldStorageConfig::create(
      [
        'field_name'             => $fieldName,
        'langcode'               => 'en',
        'entity_type'            => 'node',
        'type'                   => $config['storage']['type'],
        'settings'               => $config['storage']['settings'],
        'dependencies'           => $config['storage']['dependencies'],
        'module'                 => 'core',
        'locked'                 => FALSE,
        'cardinality'            => $config['storage']['cardinality'],
        'translatable'           => TRUE,
        'persist_with_no_fields' => FALSE,
        'custom_storage'         => FALSE,
      ]
    );
    $fieldStorageSaved = $fieldStorage->save();
    if ($fieldStorageSaved) {
      \Drupal::logger('Artifact Type')->info(
        t("Field @a storage created.",['@a' => $fieldName,])
      );
    }
    else {
      \Drupal::logger('Artifact Type')->error(
        t("Field @a storage could not be created.",['@a' => $fieldName,])
      );
    }
  }
  else {
    \Drupal::logger('Artifact Type')->info(
      t("Field @a storage could not be created because the field already exists.",
      ['@a' => $fieldName,])
    );
  }

  // Check to make sure $fieldName is not already in active configuration.
  $field = FieldConfig::loadByName('node', $bundleName, $fieldName);
  if (empty($field)) {
    // If it is not, then create it for the $bundleName bundle.
    FieldConfig::create(
      [
        'field_name'   => $fieldName,
        'entity_type'  => 'node',
        'bundle'       => $bundleName,
        'label'        => $config['field']['label'],
        'required'     => FALSE,
        'translatable' => FALSE,
        'description'  => $config['field']['description'],
        'settings'     => $config['field']['settings'],
        'field_type'   => $config['field']['field_type']
      ]
    )->save();
    \Drupal::logger('Artifact Type')->info(
      t("Field @a created in bundle @b.",
      ['@a' => $fieldName, '@b' => $bundleName])
    );
   
    // Get the entity type manager
    $entityTypemanager = \Drupal::entityTypeManager();

    /* Assign settings for $fieldName to the 'default' entity form display for 
       the $bundleName bundle. */
    $displayForm = $entityTypemanager
      ->getStorage('entity_form_display')
      ->load('node.' . $bundleName . '.default')
      ->setComponent($fieldName, [
        'type'   => $config['field']['form']['type'],
        'weight' => $config['field']['form']['weight'],
        'settings' => $config['field']['form']['settings'],
        'region' => $config['field']['form']['region']
      ]);
    if ($displayForm->save()) {
      \Drupal::logger('Artifact Type')->info(
        t("Default form settings created for field @a in bundle @b.",
        ['@a' => $fieldName, '@b' => $bundleName])
      );
    }
    else {
      \Drupal::logger('Artifact Type')->error(
        t("Default form settings could not be set for field @a in bundle @b.",
        ['@a' => $fieldName, '@b' => $bundleName])
      );
    }

    /* Add $fieldName to the $formGroupName field group in the default form display 
       for the $bundleName bundle. */
    $group_list_settings = $entityTypemanager
      ->getStorage('entity_form_display')
      ->load('node.' . $bundleName . '.default')
      ->getThirdPartySetting('field_group','group_node_edit_form');
    // First check to see if the $formGroupName exists.
    if ( ! in_array( $formGroupName, $group_list_settings['children'])) {
      // If it does not, add the new group to the master list.
      $group_list_settings['children'][] = $formGroupName;
      $entityTypemanager
        ->getStorage('entity_form_display')
        ->load('node.' . $bundleName . '.default')
        ->setThirdPartySetting('field_group', 'group_node_edit_form', $group_list_settings)
        ->save();
      // Then create the settings for the new group.
      $group_settings = [
        'children' => [
          $fieldName
        ],
        'parent_name' => 'group_node_edit_form',
        'weight' => $config['group']['group_form_weight'],
        'format_type' => 'tab',
        'format_settings' => [
          'id' => '',
          'classes' => '',
          'formatter' => 'open',
          'description' => $config['group']['group_description'],
          'required_fields' => TRUE
        ],
        'label' =>  $config['group']['group_form_label']
      ];
      $entityTypemanager
        ->getStorage('entity_form_display')
        ->load('node.' . $bundleName . '.default')
        ->setThirdPartySetting('field_group', $formGroupName, $group_settings)
        ->save();
    }
    else {
      // Otherwise, just add $fieldName to the $formGroupName field group.
      $group_settings = $entityTypemanager
        ->getStorage('entity_form_display')
        ->load('node.' . $bundleName . '.default')
        ->getThirdPartySetting('field_group',$formGroupName);
      $group_settings['children'][] = $fieldName;
      $entityTypemanager
        ->getStorage('entity_form_display')
        ->load('node.' . $bundleName . '.default')
        ->setThirdPartySetting('field_group', $formGroupName, $group_settings)
        ->save();
    }

    /* Assign settings for $fieldName to the 'default' entity view display for 
       the $bundleName bundle. */
    $displayView = $entityTypemanager
      ->getStorage('entity_view_display')
      ->load('node.' . $bundleName . '.default')
      ->setComponent($fieldName, [
        'weight' => $config['field']['view']['weight'],
        'label' => 'above',
        'settings' => $config['field']['view']['settings'],
        'third_party_settings' => [],
        'type' => $config['field']['view']['type'],
        'region' => $config['field']['view']['region']
      ]);
    if ($displayView->save()) {
      \Drupal::logger('Artifact Type')->info(
        t("Default view settings created for field @a in bundle @b.",
        ['@a' => $fieldName, '@b' => $bundleName])
      );
    }
    else {
      \Drupal::logger('Artifact Type')->error(
        t("Default view settings could not be set for field @a in bundle @b.",
        ['@a' => $fieldName, '@b' => $bundleName])
      );
    }

    /* Add $fieldName to the $viewGroupName field group in the default view display 
       for the $bundleName bundle. */
    $group_list_settings = $entityTypemanager
      ->getStorage('entity_view_display')
      ->load('node.' . $bundleName . '.default')
      ->getThirdPartySetting('field_group',$viewGroupName);
    // First check to see if the $viewGroupName exists.
    if ( empty($group_list_settings) ) {
      /* If it does not, add the new group to the master list and create the 
         settings for the new group. */
      $group_settings = [
        'children' => [
          $fieldName
        ],
        'parent_name' => '',
        'weight' => $config['group']['group_view_weight'],
        'format_type' => 'html_element',
        'format_settings' => [
          'label' => $config['group']['group_view_label'],
          'element' => 'div',
          'show_label' => TRUE,
          'label_element' => 'h3',
          'attributes' => '',
          'effect' => 'none',
          'speed' => 'fast',
          'id' => '',
          'classes' => $config['group']['group_view_class']
        ],
        'label' =>  $config['group']['group_view_label']
      ];
      $entityTypemanager
        ->getStorage('entity_view_display')
        ->load('node.' . $bundleName . '.default')
        ->setThirdPartySetting('field_group', $viewGroupName, $group_settings)
        ->save();
    }
    else {
      // Otherwise, just add $fieldName to the $viewGroupName field group.
      $group_settings = $entityTypemanager
        ->getStorage('entity_view_display')
        ->load('node.' . $bundleName . '.default')
        ->getThirdPartySetting('field_group',$viewGroupName);
      $group_settings['children'][] = $fieldName;
      $entityTypemanager
        ->getStorage('entity_view_display')
        ->load('node.' . $bundleName . '.default')
        ->setThirdPartySetting('field_group', $viewGroupName, $group_settings)
        ->save();
    }

  }
  else {
    \Drupal::logger('Artifact Type')->info(
      t("Field @a already exists in bundle @b.",
        ['@a' => $fieldName, '@b' => $bundleName])
    );
  }
}

/**
 * Update hook for adding descriptions to all the artifact fields.
 * 
 * Does not include the CRD group fields, since those descriptions were added in update_8001.
 */
function cds_artifact_type_update_8002() {

  // Associative array of the field names and descriptions.
  $field_updates = [
    'field_artifact_type' => [
      'entity_type' => 'node',
      'bundle_name' => 'artifact',
      'updates' => [
        'description' => 'The type of the artifact (see Artifact Type Taxonomy for possible values).'
      ]
    ],
    'field_clinical_domain' => [
      'entity_type' => 'node',
      'bundle_name' => 'artifact',
      'updates' => [
        'description' => 'The clinical specialties for which the artifact is relevant (see Clinical Domain Taxonomy for possible values). These terms may be used to assist with indexing and searching of artifacts in the repository.'
      ]
    ],
    'field_contributors' => [
      'entity_type' => 'node',
      'bundle_name' => 'artifact',
      'updates' => [
        'description' => 'List of individuals or organizations that contributed to the development of the artifact.'
      ]
    ],
    'field_copyrights' => [
      'entity_type' => 'node',
      'bundle_name' => 'artifact',
      'updates' => [
        'description' => 'Copyright statements associated with this artifact.'
      ]
    ],
    'field_creation_date' => [
      'entity_type' => 'node',
      'bundle_name' => 'artifact',
      'updates' => [
        'description' => 'Date on which the artifact was created.'
      ]
    ],
    'field_description' => [
      'entity_type' => 'node',
      'bundle_name' => 'artifact',
      'updates' => [
        'description' => 'A narrative description of the artifact, in plain language.'
      ]
    ],
    'field_experimental' => [
      'entity_type' => 'node',
      'bundle_name' => 'artifact',
      'updates' => [
        'description' => 'Flag indicating whether this artifact is experimental (in early draft state, not yet intended for clinical use).'
      ]
    ],
    'field_identifier' => [
      'entity_type' => 'node',
      'bundle_name' => 'artifact',
      'updates' => [
        'label' => 'Unique Identifier',
        'description' => 'Identifier defined by the CDS Connect team for the artifact.'
      ]
    ],
    'field_ip_attestation' => [
      'entity_type' => 'node',
      'bundle_name' => 'artifact',
      'updates' => [
        'description' => 'Flag indicating that the author asserts that this artifact has been developed in compliance with the IP rights attributed to the source material.'
      ]
    ],
    'field_keywords' => [
      'entity_type' => 'node',
      'bundle_name' => 'artifact',
      'updates' => [
        'description' => 'User-defined keywords associated with this artifact.'
      ]
    ],
    'field_knowledge_level' => [
      'entity_type' => 'node',
      'bundle_name' => 'artifact',
      'updates' => [
        'description' => 'The four levels of knowledge representation of a CDS artifact by Boxwala et al (see Knowledge Level Taxonomy for possible values).'
      ]
    ],
    'field_license' => [
      'entity_type' => 'node',
      'bundle_name' => 'artifact',
      'updates' => [
        'description' => 'The license governing the artifact’s usage (see License Taxonomy for possible values).'
      ]
    ],
    'field_publisher' => [
      'entity_type' => 'node',
      'bundle_name' => 'artifact',
      'updates' => [
        'description' => 'The original publisher of the artifact.'
      ]
    ],
    'field_related_artifacts' => [
      'entity_type' => 'node',
      'bundle_name' => 'artifact',
      'updates' => [
        'description' => 'Other artifacts in the CDS repository related to this artifact.'
      ]
    ],
    'field_status' => [
      'entity_type' => 'node',
      'bundle_name' => 'artifact',
      'updates' => [
        'description' => 'The status of the artifact (see Status Taxonomy for possible values).'
      ]
    ],
    'field_steward' => [
      'entity_type' => 'node',
      'bundle_name' => 'artifact',
      'updates' => [
        'description' => 'The steward / owner of the artifact.'
      ]
    ],
    'field_version' => [
      'entity_type' => 'node',
      'bundle_name' => 'artifact',
      'updates' => [
        'description' => 'Semantic Version Number for the artifact (http://semver.org/).'
      ]
    ],
    'field_exclusions' => [
      'entity_type' => 'paragraph',
      'bundle_name' => 'artifact_representation',
      'updates' => [
        'description' => 'Lists exclusion criteria to ensure that CDS interventions are not applied to individuals that should be excluded or exempt from the recommendation.'
      ]
    ],
    'field_inclusions' => [
      'entity_type' => 'paragraph',
      'bundle_name' => 'artifact_representation',
      'updates' => [
        'description' => 'Lists inclusion criteria to ensure that CDS interventions are applied to only appropriate scenarios evaluated in the patient record.'
      ]
    ],
    'field_interventions_and_actions' => [
      'entity_type' => 'paragraph',
      'bundle_name' => 'artifact_representation',
      'updates' => [
        'description' => 'Lists the possible interventions and actions taken by CDS to provide information when the conditions specified in a rule are met.'
      ]
    ],
    'field_logic_files' => [
      'entity_type' => 'paragraph',
      'bundle_name' => 'artifact_representation',
      'updates' => [
        'description' => 'Attached documents that contain definitions or instances of the logic contained in the artifact.'
      ]
    ],
    'field_triggers' => [
      'entity_type' => 'paragraph',
      'bundle_name' => 'artifact_representation',
      'updates' => [
        'description' => 'Triggers that should activate the artifact.'
      ]
    ],
    'field_engineering_details' => [
      'entity_type' => 'paragraph',
      'bundle_name' => 'implementation_details',
      'updates' => [
        'description' => 'Any technical details an engineer may want to know.'
      ]
    ],
    'field_miscellaneous_files' => [
      'entity_type' => 'paragraph',
      'bundle_name' => 'implementation_details',
      'updates' => [
        'description' => 'Any and all miscellaneous files associated with the artifact (e.g., screenshots, workflow diagrams, training materials, etc.).'
      ]
    ],
    'field_technical_files' => [
      'entity_type' => 'paragraph',
      'bundle_name' => 'implementation_details',
      'updates' => [
        'description' => 'Any and all technical files associated with the artifact (e.g., CQL code, JSON files, shell scripts, etc.).'
      ]
    ],
    'field_cautions' => [
      'entity_type' => 'paragraph',
      'bundle_name' => 'purpose_and_usage',
      'updates' => [
        'description' => 'Any cautions or warnings to be considered regarding the artifact.'
      ]
    ],
    'field_intended_population' => [
      'entity_type' => 'paragraph',
      'bundle_name' => 'purpose_and_usage',
      'updates' => [
        'description' => 'The intended population that the artifact applies to.'
      ]
    ],
    'field_purpose' => [
      'entity_type' => 'paragraph',
      'bundle_name' => 'purpose_and_usage',
      'updates' => [
        'description' => 'The purpose of the artifact.'
      ]
    ],
    'field_test_patients' => [
      'entity_type' => 'paragraph',
      'bundle_name' => 'purpose_and_usage',
      'updates' => [
        'description' => 'Sample test (artificial) patients which demonstrate features of the artifact.'
      ]
    ],
    'field_usage' => [
      'entity_type' => 'paragraph',
      'bundle_name' => 'purpose_and_usage',
      'updates' => [
        'description' => 'The context in which the artifact is applicable or should be used.'
      ]
    ],
    'field_approval_date' => [
      'entity_type' => 'paragraph',
      'bundle_name' => 'repository_information',
      'updates' => [
        'description' => 'The date the artifact was approved for the repository.'
      ]
    ],
    'field_expiration_date' => [
      'entity_type' => 'paragraph',
      'bundle_name' => 'repository_information',
      'updates' => [
        'description' => 'The date at which artifact no longer effective.'
      ]
    ],
    'field_last_review_date' => [
      'entity_type' => 'paragraph',
      'bundle_name' => 'repository_information',
      'updates' => [
        'description' => 'The date of last review.'
      ]
    ],
    'field_preview_image' => [
      'entity_type' => 'paragraph',
      'bundle_name' => 'repository_information',
      'updates' => [
        'description' => 'An image to be used as a thumbnail visualization for the artifact.'
      ]
    ],
    'field_publication_date' => [
      'entity_type' => 'paragraph',
      'bundle_name' => 'repository_information',
      'updates' => [
        'description' => 'The date that the artifact was originally published.'
      ]
    ],
    'field_artifact_decision_notes' => [
      'entity_type' => 'paragraph',
      'bundle_name' => 'supporting_evidence',
      'updates' => [
        'description' => 'Notes describing the use of the artifact in a pilot project.'
      ]
    ],
    'field_references' => [
      'entity_type' => 'paragraph',
      'bundle_name' => 'supporting_evidence',
      'updates' => [
        'description' => 'References to external publications and resources related to the artifact.'
      ]
    ],
    'field_source' => [
      'entity_type' => 'paragraph',
      'bundle_name' => 'supporting_evidence',
      'updates' => [
        'description' => 'The primary source used to create the artifact.'
      ]
    ],
    'field_source_description' => [
      'entity_type' => 'paragraph',
      'bundle_name' => 'supporting_evidence',
      'updates' => [
        'description' => 'Description of the relationship between this artifact and the Source.'
      ]
    ],
    'field_decision_notes' => [
      'entity_type' => 'paragraph',
      'bundle_name' => 'recommendation_statement',
      'updates' => [
        'description' => 'Notes describing the decisions and choices that went into the recommendation statement.'
      ]
    ],
    'field_quality_of_evidence' => [
      'entity_type' => 'paragraph',
      'bundle_name' => 'recommendation_statement',
      'updates' => [
        'description' => 'The quality of the artifact’s evidence (e.g., fair, good, poor).'
      ]
    ],
    'field_recommendation' => [
      'entity_type' => 'paragraph',
      'bundle_name' => 'recommendation_statement',
      'updates' => [
        'description' => 'A summary of clinical recommendations supporting the artifact.'
      ]
    ],
    'field_strength_of_recommendation' => [
      'entity_type' => 'paragraph',
      'bundle_name' => 'recommendation_statement',
      'updates' => [
        'description' => 'The strength of the artifact’s recommendation.'
      ]
    ],
    'field_pilot_experience' => [
      'entity_type' => 'paragraph',
      'bundle_name' => 'testing_experience',
      'updates' => [
        'description' => 'Description of how the artifact performed when piloted in a clinical setting (e.g., use, accuracy, impact, lessons learned).'
      ]
    ]
  ];

  foreach ($field_updates as $field => $params) {
    update_artifact_field($field, $params['bundle_name'], $params['entity_type'], $params['updates']);
  }
}

/**
 * Update a field in an entity bundle.
 */
function update_artifact_field($fieldName, $bundleName, $entityType, $updates) {

  // Check to make sure $fieldName is already in active configuration.
  $field = FieldConfig::loadByName($entityType, $bundleName, $fieldName);
  if (!empty($field)) {
    // Update the field's label if necessary.
    if (isset($updates['label'])) {
      $field->setLabel($updates['label']);
    }
    // Update the field's description if necessary.
    if (isset($updates['description'])) {
      $field->setDescription($updates['description']);
    }
    // Need to save, otherwise these changes won't stick.
    $field->save();
    \Drupal::logger('Artifact Type')->info(
      t("Updated field @a in bundle @b for entity type @c.",
      ['@a' => $fieldName, '@b' => $bundleName, '@c' => $entityType])
    );
  }
  else {
    \Drupal::logger('Artifact Type')->info(
      t("Cannot update field @a in bundle @b; it does not exist.",
        ['@a' => $fieldName, '@b' => $bundleName])
    );
  }
}

/**
 * Update hook for adding MeSH topic terms to the artifact node bundle. This hook 
 * also disables the clinical domain field but does not remove it from the bundle.
 */
function cds_artifact_type_update_8003() {

  // First ensure that the mesh taxonomy exists.
  $vocabulary = \Drupal::entityTypeManager()
    ->getStorage('taxonomy_vocabulary')
    ->load('mesh');
  // If the MeSH taxonomy does not exist, create it.
  if (empty($vocabulary)) {
    Vocabulary::create([
      'name' => 'mesh',
      'vid' => 'mesh',
    ])->save();
  }

  // Add the MeSH Topics field
  $fieldName = 'field_mesh_topics';
  $config = [
    'storage' => [
      'type' => 'entity_reference',
      'cardinality' => -1,
      'dependencies' => [
        'module' => [
          'node',
          'taxonomy'
        ]
      ],
      'settings' => [
        'target_type'  => 'taxonomy_term'
      ],
    ],
    'field' => [
      'label' => 'MeSH Topics',
      'description' => 'Topic tags derived from the National Library of Medicine\'s 2019 Medical Subject Headings (MeSH) taxonomy',
      'settings' => [
        'handler' => 'default:taxonomy_term',
        'handler_settings' => [
          'target_bundles' => [
            'mesh' => 'mesh'
          ],
          'sort' => [
            'field' => 'name',
            'direction' => 'asc'
          ],      
          'auto_create' => FALSE,
          'auto_create_bundle' => ''
        ]
      ],
      'field_type' => 'entity_reference',
      'form' => [
        'weight' => 125,
        'region' => 'content',
        'type' => 'entity_reference_autocomplete',
        'settings' => [
          'match_operator' => 'CONTAINS',
          'size' => 60,
          'placeholder' => ''
        ],
      ],
      'view' => [
        'weight' => 16,
        'region' => 'content',
        'type' => 'entity_reference_label',
        'settings' => [
          'link' => TRUE
        ],
      ]
    ],
    'group' => []
  ];
  add_artifact_field($fieldName, 'group_artifact_organization', 'group_artifact_creation_fields',
    'artifact', $config);

  // Disable clinical domain field
  $fieldName = 'field_clinical_domain';
  disable_artifact_field($fieldName, 'group_artifact_organization', 'group_artifact_creation_fields',
   'artifact');
}

/**
 * Disable a field in a node bundle. This means it will not be visible in either the form display 
 * or the view display.
 */
function disable_artifact_field($fieldName, $formGroupName, $viewGroupName, $bundleName) {

  // Disable the field in the entity_form_display
  disable_entity_display($fieldName, $formGroupName, $bundleName, 'form');

  // Disable the field in the entity_view_display
  disable_entity_display($fieldName, $viewGroupName, $bundleName, 'view');
}

/**
 * Disable a field in an entity_*_display configuration.
 */
function disable_entity_display($fieldName, $groupName, $bundleName, $formOrView) {

  // Get the entity type manager
  $entityTypemanager = \Drupal::entityTypeManager();

  $config_name = 'entity_' . $formOrView . '_display';

  /* Remove $fieldName from the $groupName field group in the default form/view display 
  for the $bundleName bundle. */
  $field_group_settings = $entityTypemanager
    ->getStorage($config_name)
    ->load('node.' . $bundleName . '.default')
    ->getThirdPartySetting('field_group', $groupName);

  // First check to see if the $groupName exists.
  if ( $field_group_settings == NULL) {
    // Group does not exist.
    \Drupal::logger('Artifact Type')->info(
      t("Field @a could not be removed from group @b, since the group does not exist.",
      ['@a' => $fieldName, '@b' => $groupName])
    );
  } else {
    // The group exists, so get its settings.
    $group_settings = $field_group_settings;

    // Check that the field we want to remove is actually there.
    if (! in_array($fieldName, $group_settings['children'])) {
      // The field is not there.
      \Drupal::logger('Artifact Type')->info(
        t("Field @a could not be removed from entity_form_display group @b, since the field is not in that group.",
        ['@a' => $fieldName, '@b' => $groupName])
      );
    } else {
      // The field is in the group, so let's remove it.
      $group_settings['children'] = array_diff($group_settings['children'], [$fieldName]);
      $entityTypemanager
        ->getStorage($config_name)
        ->load('node.' . $bundleName . '.default')
        ->setThirdPartySetting('field_group', $groupName, $group_settings)
        ->save();

      \Drupal::logger('Artifact Type')->info(
        t("Field @a removed from entity_form_display group @b.",
        ['@a' => $fieldName, '@b' => $groupName])
      );
    }
  }

  // Remove the field entry from the entity form/view content configuration.
  $entity_content = $entityTypemanager
    ->getStorage($config_name)
    ->load('node.' . $bundleName . '.default')
    ->get('content');
  unset($entity_content[$fieldName]);
  $entityTypemanager
    ->getStorage($config_name)
    ->load('node.' . $bundleName . '.default')
    ->set('content', $entity_content)
    ->save();
  
  // Mark the field as hidden in the entity form/view display
  $hidden = $entityTypemanager
    ->getStorage($config_name)
    ->load('node.' . $bundleName . '.default')
    ->get('hidden');
  $hidden[] = $fieldName;
  $entityTypemanager
    ->getStorage($config_name)
    ->load('node.' . $bundleName . '.default')
    ->set('hidden', $hidden)
    ->save();
}