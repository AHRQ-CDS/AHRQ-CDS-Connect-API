<?php

use Drupal\Core\Config\FileStorage;
use Drupal\field\Entity\FieldStorageConfig;
use Drupal\field\Entity\FieldConfig;
use Psr\Log\LoggerInterface;


/**
 * Implements hook_install().
 */
function cds_artifact_type_install() {
  cds_artifact_type_update_8001();
}

/**
 * Update hook for adding DME eRx CRD fields to artifact content type.
 */
function cds_artifact_type_update_8001() {

  // Add the code system field
  $fieldName = 'field_code_system';
  $config = [
    'storage' => [
      'settings' => [
        'max_length'  => 255,
        'is_ascii'    => FALSE,
        'case_sensitive'  => FALSE
      ],
    ],
    'field' => [
      'label' => 'Code System',
      'description' => 'The name of the code system used to reference medication or durable medical equipment (DME). Only applicable for coverage requirement discovery (CRD) rules.',
      'form' => [
        'weight' => 123,
        'region' => 'content'
      ],
      'view' => [
        'weight' => 19,
        'region' => 'content'
      ]
    ],
    'group' => [
      'group_form_weight' => 20,
      'group_view_weight' => 20,
      'group_description' => 'Fields pertaining to coverage requirements discovery (CRD) for electronic prescribing (eRx) of medication or durable medical equipment (DME).',
      'group_form_label' => 'CRD',
      'group_view_label' => 'Coverage Requirements Discovery (CRD) for Electronic Prescribing (eRx)',
      'group_view_class' => 'artifact-crd-fields'
    ]
  ];
  add_artifact_field($fieldName, 'group_erx_crd', 'artifact', $config);

  // Add the equipment code field
  $fieldName = 'field_erx_code';
  $config['field']['label'] = 'Electronic Prescribing Code';
  $config['field']['description'] = 'The electronic prescribing (eRx) code representing a specific piece of medication or durable medical equipment (DME). Only applicable for coverage requirement discovery (CRD) rules.';
  $config['field']['form']['weight'] = 124;
  $config['field']['view']['weight'] = 20;
  add_artifact_field($fieldName, 'group_erx_crd', 'artifact', $config);

  // Add the payer field
  $fieldName = 'field_payer';
  $config['field']['label'] = 'Payer';
  $config['field']['description'] = 'The name of the payer for the medication or durable medical equipment (DME). Only applicable for coverage requirement discovery (CRD) rules.';
  $config['field']['form']['weight'] = 122;
  $config['field']['view']['weight'] = 18;
  add_artifact_field($fieldName, 'group_erx_crd', 'artifact', $config);

  // Create new views
  $config_path = join(DIRECTORY_SEPARATOR, 
    array(__DIR__, 'config', 'update_8001')
  );
  $source = new FileStorage($config_path);
  $active_storage = \Drupal::service('config.storage');
  $view_name = 'views.view.erx_rules';
  $active_storage->write($view_name, $source->read($view_name));

}

/**
 * Add a field to a node bundle.
 */
function add_artifact_field($fieldName, $groupName, $bundleName, $config) {

  // Check to make sure $fieldName does not already have field storage set up.
  if (empty($existingFieldStorage = FieldStorageConfig::loadByName('node', $fieldName))) {
    $fieldStorage = FieldStorageConfig::create(
      [
        'field_name'             => $fieldName,
        'langcode'               => 'en',
        'entity_type'            => 'node',
        'type'                   => 'string',
        'settings'               => $config['storage']['settings'],
        'module'                 => 'core',
        'locked'                 => FALSE,
        'cardinality'            => 1,
        'translatable'           => TRUE,
        'persist_with_no_fields' => FALSE,
        'custom_storage'         => FALSE,
      ]
    );
    $fieldStorageSaved = $fieldStorage->save();
    if ($fieldStorageSaved) {
      \Drupal::logger('Artifact Discovery')->info(
        t("Field @a storage created.",['@a' => $fieldName,])
      );
    }
    else {
      \Drupal::logger('Artifact Discovery')->error(
        t("Field @a storage could not be created.",['@a' => $fieldName,])
      );
    }
  }
  else {
    \Drupal::logger('Artifact Discovery')->info(
      t("Field @a storage could not be created because the field already exists.",
      ['@a' => $fieldName,])
    );
  }

  // Check to make sure $fieldName is not already in active configuration.
  $field = FieldConfig::loadByName('node', $bundleName, $fieldName);
  if (empty($field)) {
    // If it is not, then create it for the $bundleName bundle.
    FieldConfig::create(
      [
        'field_name'   => $fieldName,
        'entity_type'  => 'node',
        'bundle'       => $bundleName,
        'label'        => $config['field']['label'],
        'required'     => FALSE,
        'translatable' => FALSE,
        'description'  => $config['field']['description'],
      ]
    )->save();
    \Drupal::logger('Artifact Discovery')->info(
      t("Field @a created in bundle @b.",
      ['@a' => $fieldName, '@b' => $bundleName])
    );
   
    // Get the entity type manager
    $entityTypemanager = \Drupal::entityTypeManager();

    /* Assign settings for $fieldName to the 'default' entity form display for 
       the $bundleName bundle. */
    $displayForm = $entityTypemanager
      ->getStorage('entity_form_display')
      ->load('node.' . $bundleName . '.default')
      ->setComponent($fieldName, [
        'type'   => 'string_textfield',
        'weight' => $config['field']['form']['weight'],
        'settings' => [
          'size' => 60,
          'placeholder' => ''
        ],
        'region' => $config['field']['form']['region']
      ]);
    if ($displayForm->save()) {
      \Drupal::logger('Artifact Discovery')->info(
        t("Default form settings created for field @a in bundle @b.",
        ['@a' => $fieldName, '@b' => $bundleName])
      );
    }
    else {
      \Drupal::logger('Artifact Discovery')->error(
        t("Default form settings could not be set for field @a in bundle @b.",
        ['@a' => $fieldName, '@b' => $bundleName])
      );
    }

    /* Add $fieldName to the $groupName field group in the default form display 
       for the $bundleName bundle. */
    $group_list_settings = $entityTypemanager
      ->getStorage('entity_form_display')
      ->load('node.' . $bundleName . '.default')
      ->getThirdPartySetting('field_group','group_node_edit_form');
    // First check to see if the $groupName exists.
    if ( ! in_array( $groupName, $group_list_settings['children'])) {
      // If it does not, add the new group to the master list.
      $group_list_settings['children'][] = $groupName;
      $entityTypemanager
        ->getStorage('entity_form_display')
        ->load('node.' . $bundleName . '.default')
        ->setThirdPartySetting('field_group', 'group_node_edit_form', $group_list_settings)
        ->save();
      // Then create the settings for the new group.
      $group_settings = [
        'children' => [
          $fieldName
        ],
        'parent_name' => 'group_node_edit_form',
        'weight' => $config['group']['group_form_weight'],
        'format_type' => 'tab',
        'format_settings' => [
          'id' => '',
          'classes' => '',
          'formatter' => 'open',
          'description' => $config['group']['group_description'],
          'required_fields' => TRUE
        ],
        'label' =>  $config['group']['group_form_label']
      ];
      $entityTypemanager
        ->getStorage('entity_form_display')
        ->load('node.' . $bundleName . '.default')
        ->setThirdPartySetting('field_group', $groupName, $group_settings)
        ->save();
    }
    else {
      // Otherwise, just add $fieldName to the $groupName field group.
      $group_settings = $entityTypemanager
        ->getStorage('entity_form_display')
        ->load('node.' . $bundleName . '.default')
        ->getThirdPartySetting('field_group',$groupName);
      $group_settings['children'][] = $fieldName;
      $group_settings['weight'] = $config['group']['group_form_weight'];
      $entityTypemanager
        ->getStorage('entity_form_display')
        ->load('node.' . $bundleName . '.default')
        ->setThirdPartySetting('field_group', $groupName, $group_settings)
        ->save();
    }

    /* Assign settings for $fieldName to the 'default' entity view display for 
       the $bundleName bundle. */
    $displayView = $entityTypemanager
      ->getStorage('entity_view_display')
      ->load('node.' . $bundleName . '.default')
      ->setComponent($fieldName, [
        'weight' => $config['field']['view']['weight'],
        'label' => 'above',
        'settings' => [
          'link_to_entity' => FALSE
        ],
        'third_party_settings' => [],
        'type' => 'string',
        'region' => $config['field']['view']['region']
      ]);
    if ($displayView->save()) {
      \Drupal::logger('Artifact Discovery')->info(
        t("Default view settings created for field @a in bundle @b.",
        ['@a' => $fieldName, '@b' => $bundleName])
      );
    }
    else {
      \Drupal::logger('Artifact Discovery')->error(
        t("Default view settings could not be set for field @a in bundle @b.",
        ['@a' => $fieldName, '@b' => $bundleName])
      );
    }

    /* Add $fieldName to the $groupName field group in the default view display 
       for the $bundleName bundle. */
    $group_list_settings = $entityTypemanager
      ->getStorage('entity_view_display')
      ->load('node.' . $bundleName . '.default')
      ->getThirdPartySetting('field_group',$groupName);
    // First check to see if the $groupName exists.
    if ( empty($group_list_settings) ) {
      /* If it does not, add the new group to the master list and create the 
         settings for the new group. */
      $group_settings = [
        'children' => [
          $fieldName
        ],
        'parent_name' => '',
        'weight' => $config['group']['group_view_weight'],
        'format_type' => 'html_element',
        'format_settings' => [
          'label' => $config['group']['group_view_label'],
          'element' => 'div',
          'show_label' => TRUE,
          'label_element' => 'h3',
          'attributes' => '',
          'effect' => 'none',
          'speed' => 'fast',
          'id' => '',
          'classes' => $config['group']['group_view_class']
        ],
        'label' =>  $config['group']['group_view_label']
      ];
      $entityTypemanager
        ->getStorage('entity_view_display')
        ->load('node.' . $bundleName . '.default')
        ->setThirdPartySetting('field_group', $groupName, $group_settings)
        ->save();
    }
    else {
      // Otherwise, just add $fieldName to the $groupName field group.
      $group_settings = $entityTypemanager
        ->getStorage('entity_view_display')
        ->load('node.' . $bundleName . '.default')
        ->getThirdPartySetting('field_group',$groupName);
      $group_settings['children'][] = $fieldName;
      $group_settings['weight'] = $config['group']['group_view_weight'];
      $group_settings['format_settings']['label'] = $config['group']['group_view_label'];
      $group_settings['label'] = $config['group']['group_view_label'];
      $entityTypemanager
        ->getStorage('entity_view_display')
        ->load('node.' . $bundleName . '.default')
        ->setThirdPartySetting('field_group', $groupName, $group_settings)
        ->save();
    }

  }
  else {
    \Drupal::logger('Artifact Discovery')->info(
      t("Field @a already exists in bundle @b.",
        ['@a' => $fieldName, '@b' => $bundleName])
    );
  }
}